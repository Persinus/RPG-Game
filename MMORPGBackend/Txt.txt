{
  _id: ObjectId("..."),
  username: "manh72",
  password_hash: "sha256:xxxxxx",
  email: "manh@example.com",
  created_at: ISODate("2025-09-22T00:00:00Z"),
  last_login: ISODate("2025-10-10T12:00:00Z"),

  // ⚔️ Thông tin nhân vật
  character: {
    name: "Mạnh",
    class: "Warrior",          // tùy thêm nếu cần
    level: 12,                 // cấp hiện tại
    exp: 3400,                 // exp hiện có (tổng)
    exp_present:1200,
    
    // Chỉ số cơ bản (base stats, chưa cộng bonus từ trang bị/pet)
    hp: 180,
    mp: 100,
    max_hp: 180,
    max_mp: 100,
    damage: 45,
    skill_damage_percent: 0.20,

    // 💰 Tài sản trong game
    gold: 5000,
    diamond: 25,

    // 📍 Vị trí hiện tại
    position: {
      map_id: "forest_zone_1",
    },

    // 🐾 Pet (lưu tên + bonus để dễ cộng khi load)
    pet: {
      name: "Flame Pup",
      // bonus có thể là 0 nếu pet không tăng loại này
      bonus_hp: 20,         // tăng trực tiếp max_hp hoặc hp tuỳ bạn áp dụng
      bonus_mp: 0,          // tăng mp
      bonus_damage: 5       // tăng damage
    },

    // 🎯 Nhiệm vụ
    // currentQuest: nhiệm vụ đang làm (null nếu không có)
    // quests_completed: array id nhiệm vụ đã hoàn thành
    // quest_log: list nhiệm vụ đang có tiến độ (có thể chứa partial progress)
    currentQuest: {
      quest_id: "quest_005",
      name: "Clear the Slimes",
      type: "kill",
      target: { monster: "slime", count: 10 },
      progress: { current: 4, required: 10 }, // đang làm được 4/10
      reward: { gold: 200, exp: 150, item: "hp_potion" },
    
    },

    quests_completed: [
      "quest_001",
      "quest_002"
    ],

    quest_log: [
      // có thể lưu nhiều nhiệm vụ đang làm (main + side)
      {
        quest_id: "quest_005",
        progress: { current: 4, required: 10 },
      }
    ]
  },

  // 🧥 Trang bị hiện tại
  equipment: {
    weapon: { id: "weapon_iron_01", name: "Iron Sword", level: 2, bonus_damage: 10 },
    armor: { id: "armor_leather_01", name: "Leather Armor", level: 1, skill_boost: 0.05 },
    pants: { id: "pants_01", name: "Adventurer Pants", level: 1, bonus_hp: 30 },
    boots: { id: "boots_01", name: "Mana Boots", level: 1, bonus_mp: 20 }
  },

  // 🎒 Hành trang (Inventory) – gồm vật phẩm nhặt được & chưa xài
  inventory: [
    { id: "hp_potion", name: "HP Potion", type: "consumable", quantity: 5 },
    { id: "mp_potion", name: "MP Potion", type: "consumable", quantity: 3 },
    { id: "iron_ore", name: "Iron Ore", type: "material", quantity: 10 },
    { id: "fire_gem", name: "Fire Gem", type: "upgrade", quantity: 1 }
  ]
}


🧱 Cấu trúc thư mục gợi ý
rpg-api/
├─ .env
├─ package.json
├─ server.js
├─ src/
│  ├─ db.js
│  ├─ models/
│  │   └─ userModel.js
│  ├─ routes/
│  │   ├─ authRoutes.js
│  │   └─ playerRoutes.js
│  └─ utils/
│      └─ hash.js

📦 1. package.json
{
  "name": "rpg-api",
  "version": "1.0.0",
  "description": "Fastify API for RPG Online game",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js"
  },
  "dependencies": {
    "dotenv": "^16.4.5",
    "fastify": "^4.26.2",
    "fastify-cors": "^8.4.0",
    "jsonwebtoken": "^9.0.2",
    "mongoose": "^8.6.1",
    "bcryptjs": "^2.4.3"
  },
  "devDependencies": {
    "nodemon": "^3.1.4"
  }
}

🔐 2. .env

(Render sẽ tự đọc file này, không push public nhé)


⚙️ 3. server.js
import Fastify from "fastify";
import cors from "fastify-cors";
import dotenv from "dotenv";
import { connectDB } from "./src/db.js";
import authRoutes from "./src/routes/authRoutes.js";

dotenv.config();
const fastify = Fastify({ logger: true });

// Middleware
fastify.register(cors, { origin: "*" });

// Routes
fastify.register(authRoutes, { prefix: "/auth" });

// Start server
const start = async () => {
  try {
    await connectDB();
    await fastify.listen({ port: process.env.PORT, host: "0.0.0.0" });
    console.log("🚀 Server running on port", process.env.PORT);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};

start();

🗄️ 4. src/db.js
import mongoose from "mongoose";
import dotenv from "dotenv";
dotenv.config();

export const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log("✅ MongoDB Connected");
  } catch (err) {
    console.error("❌ MongoDB connection error:", err);
    process.exit(1);
  }
};

👤 5. src/models/userModel.js
import mongoose from "mongoose";

const userSchema = new mongoose.Schema({
  username: { type: String, unique: true, required: true },
  password_hash: { type: String, required: true },
  email: { type: String, required: true },
  created_at: { type: Date, default: Date.now },
  last_login: { type: Date },

  // nhân vật — để trống khi đăng ký
  character: { type: Object, default: {} },
  equipment: { type: Object, default: {} },
  inventory: { type: Array, default: [] }
});

export const User = mongoose.model("User", userSchema);

🔑 6. src/utils/hash.js
import bcrypt from "bcryptjs";

export const hashPassword = async (plain) => {
  const salt = await bcrypt.genSalt(10);
  return await bcrypt.hash(plain, salt);
};

export const comparePassword = async (plain, hashed) => {
  return await bcrypt.compare(plain, hashed);
};

🛠️ 7. src/routes/authRoutes.js
import { User } from "../models/userModel.js";
import { hashPassword, comparePassword } from "../utils/hash.js";
import jwt from "jsonwebtoken";

export default async function authRoutes(fastify, opts) {
  // Đăng ký
  fastify.post("/register", async (req, reply) => {
    const { username, password, email } = req.body;
    try {
      const exists = await User.findOne({ username });
      if (exists) return reply.code(400).send({ error: "Username đã tồn tại" });

      const password_hash = await hashPassword(password);
      const user = await User.create({ username, password_hash, email });
      reply.send({ message: "Đăng ký thành công", userId: user._id });
    } catch (err) {
      console.error(err);
      reply.code(500).send({ error: "Server error" });
    }
  });

  // Đăng nhập
  fastify.post("/login", async (req, reply) => {
    const { username, password } = req.body;
    try {
      const user = await User.findOne({ username });
      if (!user) return reply.code(400).send({ error: "Sai tài khoản" });

      const match = await comparePassword(password, user.password_hash);
      if (!match) return reply.code(400).send({ error: "Sai mật khẩu" });

      user.last_login = new Date();
      await user.save();

      const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
        expiresIn: "7d"
      });

      reply.send({ message: "Đăng nhập thành công", token });
    } catch (err) {
      console.error(err);
      reply.code(500).send({ error: "Server error" });
    }
  });
}

✅ Khi deploy lên Render

Push code lên GitHub.

Vào Render → “New Web Service” → chọn repo này.

Render sẽ đọc .env của bạn (bạn có thể tạo thủ công trong Render Dashboard).

Cổng chạy: 8080

🧩 Sau này Unity có thể request:
🔹 Đăng ký

POST https://rpg-api.onrender.com/auth/register

{ "username": "manh72", "password": "123456", "email": "manh@example.com" }

🔹 Đăng nhập

POST https://rpg-api.onrender.com/auth/login

{ "username": "manh72", "password": "123456" }


Trả về token → dùng trong header:

Authorization: Bearer <token>


Bạn có muốn mình thêm luôn route /player/init
→ để khi người chơi đăng ký xong, server tự tạo character rỗng (level=1, hp=100, gold=0)?
Cái đó giúp Unity đỡ phải gửi từng bước.