import { User } from "../models/userModel.js";
import { hashPassword, comparePassword } from "../../utils/hash.js";

export default async function authRoutes(fastify, opts) {
  // üìò Schema cho Swagger + Validation (r√∫t g·ªçn)
  const registerSchema = {
    schema: {
      summary: "ƒêƒÉng k√Ω t√†i kho·∫£n m·ªõi (ho·∫∑c x√°c nh·∫≠n guest b·∫±ng gameId)",
      tags: ["Auth"],
      body: {
        type: "object",
        required: ["username", "password", "email"],
        properties: {
          username: { type: "string" },
          password: { type: "string" },
          email: { type: "string" },
          gameId: { type: "string" }, // n·∫øu c√≥ -> x√°c nh·∫≠n guest v√† g√°n username/password/email
        },
      },
      response: {
        200: {
          description: "K·∫øt qu·∫£ ƒëƒÉng k√Ω",
          type: "object",
          additionalProperties: true,
        },
      },
    },
  };

  const loginSchema = {
    schema: {
      summary: "ƒêƒÉng nh·∫≠p (b·∫±ng username/password ho·∫∑c b·∫±ng gameId c·ªßa guest)",
      tags: ["Auth"],
      body: {
        type: "object",
        properties: {
          username: { type: "string" },
          password: { type: "string" },
          gameId: { type: "string" }, // ∆∞u ti√™n n·∫øu c√≥
        },
      },
      response: {
        200: { type: "object", additionalProperties: true },
      },
    },
  };

  // ƒêƒÉng k√Ω ho·∫∑c x√°c nh·∫≠n guest b·∫±ng gameId
  fastify.post("/register", registerSchema, async (req, reply) => {
    const { username, password, email, gameId } = req.body || {};
    try {
      // N·∫øu c√≥ gameId -> t√¨m guest v√† "claim" account
      if (gameId) {
        const guest = await User.findOne({ gameId });
        if (!guest) return reply.code(404).send({ error: "Kh√¥ng t√¨m th·∫•y guest v·ªõi gameId" });

        // ki·ªÉm tra username ƒë√£ c√≥ (ngo·∫°i tr·ª´ ch√≠nh guest)
        const exists = await User.findOne({ username });
        if (exists && String(exists._id) !== String(guest._id)) {
          return reply.code(400).send({ error: "Username ƒë√£ t·ªìn t·∫°i" });
        }

        guest.username = username;
        guest.password_hash = await hashPassword(password);
        guest.email = email;
        // khi claim, x√≥a ho·∫∑c gi·ªØ gameId tu·ª≥ b·∫°n; ·ªü ƒë√¢y gi·ªØ (v·∫´n c√≥ th·ªÉ d√πng)
        await guest.save();

        const resp = guest.toObject();
        delete resp.password_hash;
        return reply.send({ message: "Claim t√†i kho·∫£n guest th√†nh c√¥ng", user: resp });
      }

      // ƒëƒÉng k√Ω th√¥ng th∆∞·ªùng
      const exists = await User.findOne({ username });
      if (exists) return reply.code(400).send({ error: "Username ƒë√£ t·ªìn t·∫°i" });

      const password_hash = await hashPassword(password);
      const user = await User.create({
        username,
        password_hash,
        email,
        // character s·∫Ω ƒë∆∞·ª£c kh·ªüi t·∫°o sau qua /player/init
      });

      const resp = user.toObject();
      delete resp.password_hash;
      return reply.send({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng", user: resp });
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });

  // ƒêƒÉng nh·∫≠p: h·ªó tr·ª£ gameId (guest) ho·∫∑c username/password
  fastify.post("/login", loginSchema, async (req, reply) => {
    const { username, password, gameId } = req.body || {};
    try {
      if (gameId) {
        const user = await User.findOne({ gameId }).lean();
        if (!user) return reply.code(404).send({ error: "Kh√¥ng t√¨m th·∫•y gameId" });
        const { password_hash, ...rest } = user;
        return reply.send({ message: "ƒêƒÉng nh·∫≠p b·∫±ng gameId th√†nh c√¥ng", user: rest });
      }

      if (!username || !password) return reply.code(400).send({ error: "Thi·∫øu username ho·∫∑c password" });

      const user = await User.findOne({ username });
      if (!user) return reply.code(400).send({ error: "Sai t√†i kho·∫£n" });

      const match = await comparePassword(password, user.password_hash);
      if (!match) return reply.code(400).send({ error: "Sai m·∫≠t kh·∫©u" });

      await user.save(); // gi·ªØ ƒë·ªÉ c√≥ th·ªÉ update n·∫øu c·∫ßn

      const userObj = user.toObject();
      delete userObj.password_hash;
      return reply.send({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng", user: userObj });
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });

  // T·∫°o guest m·ªõi -> tr·∫£ v·ªÅ gameId (ch·ªâ tr·∫£ gameId + _id, kh√¥ng tr·∫£ username/email/character/characterTypes)
  fastify.post("/guest", async (req, reply) => {
    try {
      const rand = () => Math.random().toString(36).slice(2, 10);
      const gid = `g_${Date.now().toString(36)}_${rand()}`;

      // l∆∞u minimal d·ªØ li·ªáu, ƒë√°nh d·∫•u isGuest
      const user = await User.create({
        username: "",      // kh√¥ng l·ªô username
        password_hash: "", // guest kh√¥ng c·∫ßn password
        email: "",
        isGuest: true,
        gameId: gid,
        character: { class: "", name: "", level: 0, skills: { skill1:0, skill2:0, skill3:0 } }, // empty state
      });

      // Tr·∫£ v·ªÅ ch·ªâ gameId v√† _id ‚Äî kh√¥ng tr·∫£ characterTypes/character/username/email
      return reply.send({ message: "Guest created", gameId: gid, id: user._id });
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });

  // ƒê·ªïi m·∫≠t kh·∫©u
  fastify.post("/change-password", {
    schema: {
      summary: "ƒê·ªïi m·∫≠t kh·∫©u (b·∫±ng username+oldPassword ho·∫∑c b·∫±ng gameId kh√¥ng c·∫ßn oldPassword)",
      tags: ["Auth"],
      body: {
        type: "object",
        required: ["newPassword"],
        properties: {
          username: { type: "string" },
          oldPassword: { type: "string" },
          gameId: { type: "string" }, // n·∫øu d√πng gameId c√≥ th·ªÉ ƒë·ªïi tr·ª±c ti·∫øp (claim/guest flow)
          newPassword: { type: "string" },
        },
      },
      response: { 200: { type: "object", additionalProperties: true } },
    },
  }, async (req, reply) => {
    const { username, oldPassword, gameId, newPassword } = req.body || {};
    try {
      if (!newPassword) return reply.code(400).send({ error: "Thi·∫øu newPassword" });

      let user = null;
      if (username) user = await User.findOne({ username });
      if (!user && gameId) user = await User.findOne({ gameId });
      if (!user) return reply.code(404).send({ error: "Kh√¥ng t√¨m th·∫•y user" });

      // N·∫øu c√≥ username + oldPassword -> verify. N·∫øu ch·ªâ c√≥ gameId -> cho ph√©p ƒë·ªïi (guest flow).
      if (username) {
        if (!oldPassword) return reply.code(400).send({ error: "Thi·∫øu oldPassword" });
        const ok = await comparePassword(oldPassword, user.password_hash);
        if (!ok) return reply.code(400).send({ error: "oldPassword kh√¥ng ƒë√∫ng" });
      }

      user.password_hash = await hashPassword(newPassword);
      await user.save();
      return reply.send({ message: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng" });
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });

  // L·∫•y t·∫•t c·∫£ user (ƒë√£ lo·∫°i password_hash)
  fastify.get("/users", {
    schema: {
      summary: "L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng",
      tags: ["Auth"],
      response: { 200: { type: "array", items: { type: "object", additionalProperties: true } } },
    },
  }, async (req, reply) => {
    try {
      const users = await User.find().lean();
      const sanitized = users.map(u => {
        const { password_hash, ...rest } = u;
        return rest;
      });
      return reply.send(sanitized);
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });

  // Xem user theo id
  fastify.get("/users/:id", {
    schema: {
      summary: "L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo id",
      tags: ["Auth"],
      params: { type: "object", required: ["id"], properties: { id: { type: "string" } } },
      response: { 200: { type: "object", additionalProperties: true }, 404: { type: "object", additionalProperties: true } },
    },
  }, async (req, reply) => {
    const { id } = req.params;
    try {
      const user = await User.findById(id).lean();
      if (!user) return reply.code(404).send({ error: "Kh√¥ng t√¨m th·∫•y user" });
      const { password_hash, ...rest } = user;
      return reply.send(rest);
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });

  // X√≥a user theo id
  fastify.delete("/users/:id", {
    schema: {
      summary: "X√≥a t√†i kho·∫£n theo id",
      tags: ["Auth"],
      params: { type: "object", required: ["id"], properties: { id: { type: "string" } } },
      response: { 200: { type: "object", additionalProperties: true }, 404: { type: "object", additionalProperties: true } },
    },
  }, async (req, reply) => {
    const { id } = req.params;
    try {
      const deleted = await User.findByIdAndDelete(id);
      if (!deleted) return reply.code(404).send({ error: "Kh√¥ng t√¨m th·∫•y user ƒë·ªÉ x√≥a" });
      return reply.send({ message: "X√≥a t√†i kho·∫£n th√†nh c√¥ng" });
    } catch (err) {
      console.error(err);
      return reply.code(500).send({ error: "Server error" });
    }
  });
}
